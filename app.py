import streamlit as st
from openai import OpenAI
import base64
from PIL import Image
import io

# --------------------------------------------------------------------------
# 1. ุฅุนุฏุงุฏุงุช ุงูุตูุญุฉ ูุงููุงุฌูุฉ
# --------------------------------------------------------------------------
st.set_page_config(
    page_title="ุงููุงุฑุฏ ุงููุญูู",
    page_icon="๐งโโ๏ธ",
    layout="wide"
)

# ุนุฑุถ ุงูุนููุงู ุงูุฑุฆูุณู
st.title("ุงููุงุฑุฏ ุงููุญูู ๐งโโ๏ธ")
st.markdown("ุฎุจูุฑ ุงูุชุญููู ุงูููู ุงูุฐู ูุญูู ุตูุฑ ุงูุดุงุฑุชุงุช ุฅูู ุชุญููู ูุชูุฏู.")
st.divider()

# --------------------------------------------------------------------------
# 2. ุงูุงุชุตุงู ุจู OpenAI ูุฅุฏุงุฑุฉ ุงูููุชุงุญ ุงูุณุฑู
# --------------------------------------------------------------------------
try:
    client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
except Exception:
    st.error("ูู ูุชู ุงูุนุซูุฑ ุนูู ููุชุงุญ OpenAI ุงูุณุฑู. ูุฑุฌู ุฅุถุงูุชู ูู ุฅุนุฏุงุฏุงุช ุงูุชุทุจูู (Secrets) ุนูุฏ ุงููุดุฑ.")
    st.stop()

# --------------------------------------------------------------------------
# 3. ููุทู ุฑูุน ุงูุตูุฑ ูุชุญููููุง
# --------------------------------------------------------------------------
uploaded_file = st.file_uploader(
    "ุงุฑูุน ุตูุฑุฉ ุงูุดุงุฑุช ููุง ููุชุญููู",
    type=["png", "jpg", "jpeg", "webp"]
)

ANALYSIS_PROMPT = """
ุฃูุช 'ุงููุงุฑุฏ ุงููุญูู'ุ ุฎุจูุฑ ุนุงููู ูู ุชุญููู ุงูุฃุณูุงู ุงููุงููุฉ. ูููุชู ูู ุชุญููู ุตูุฑุฉ ุงูุดุงุฑุช ุงูููุฏูุฉ ูู ูุชูุฏูู ุฎุทุฉ ุชุฏุงูู ูุงููุฉ.

**ุงูุฎุทูุฉ ุงูุฃููู ูุงูุฃูุซุฑ ุฃูููุฉ (ุงูุนูู ุงูุณุญุฑูุฉ):**
ูุจู ุฃู ุดูุก ุขุฎุฑุ ูู ุจุฅุฌุฑุงุก ูุณุญ ุจุตุฑู ุฏููู (OCR) ููุตูุฑุฉ. ูุฌุจ ุนููู ุงุณุชุฎุฑุงุฌ ุฌููุน ุงูุฃุฑูุงู ุงูุธุงูุฑุฉ ุนูู ูุญูุฑ ุงูุณุนุฑ (ุงููุญูุฑ ุงูุนููุฏู) ุจุฏูุฉ ูุชูุงููุฉ. ูุฌุจ ุฃู ูููู ุชุญูููู ุจุงููุงูู ูุจูููุง ุนูู ูุฐู ุงูุฃุฑูุงู ุงูุญููููุฉ.

**ูููุฌูุฉ ุงูุชุญููู:**
ุจูุงุกู ุนูู ุงูุฃุฑูุงู ุงูุฏูููุฉุ ูู ุจุชุญููู ุงูุดุงุฑุช ุจุงุณุชุฎุฏุงู ููุงููู ุงููุงู ุงูุฐูู (SMC).

**ุชูุณูู ุงููุฎุฑุฌุงุช (ููู ุฌุฏูุง):**
ูุฌุจ ุฃู ูููู ุฑุฏู **ุญุตุฑุงู** ูุงุฆู JSON ุจุงููุบุฉ ุงูุนุฑุจูุฉุ ุจุฏูู ุฃู ูุตูุต ุฅุถุงููุฉ ูุจูู ุฃู ุจุนุฏู. ูุฌุจ ุฃู ูุญุชูู ุงูู JSON ุนูู ุงูููุงุชูุญ ุงูุชุงููุฉ ุจุงูุถุจุท:
{
  "decision": "ุดุฑุงุก/ุจูุน/ุงูุชุธุงุฑ",
  "confidence": "ุนุงูู/ูุชูุณุท/ููุฎูุถ",
  "analysis_summary": {
    "market_structure": "ูุตู ููุฌุฒ ููููู ุงูุณูู ุงูุญุงูู.",
    "liquidity_targets": "ุชุญุฏูุฏ ูุณุชููุงุช ุงูุณูููุฉ ุงููุณุชูุฏูุฉ.",
    "key_zone": "ุชุญุฏูุฏ ุฃูู ููุทูุฉ ุทูุจ ุฃู ุนุฑุถ."
  },
  "trade_plan": {
    "entry_point": "ุงูุณุนุฑ ุงูููุชุฑุญ ููุฏุฎูู",
    "stop_loss": "ุงูุณุนุฑ ุงูููุชุฑุญ ูููู ุงูุฎุณุงุฑุฉ",
    "take_profit_1": "ุงููุฏู ุงูุฃูู",
    "take_profit_2": "ุงููุฏู ุงูุซุงูู"
  },
  "final_reasoning": "ููุฎุต ููุงุฆู ูุณุจุจ ุงุชุฎุงุฐ ูุฐุง ุงููุฑุงุฑ."
}
"""

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="ุงูุดุงุฑุช ุงููุฑููุน ููุชุญููู", width=600)

    if st.button("๐ฎ ุงุจุฏุฃ ุงูุชุญููู ุงูุณุญุฑู", use_container_width=True):
        with st.spinner("ุงููุงุฑุฏ ูุนูู ุนูู ุชุญููู ุงูุดุงุฑุช... ุงูุฑุฌุงุก ุงูุงูุชุธุงุฑ..."):
            try:
                buffered = io.BytesIO()
                image.save(buffered, format=image.format)
                img_str = base64.b64encode(buffered.getvalue()).decode("utf-8")
                img_url = f"data:image/png;base64,{img_str}"

                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": ANALYSIS_PROMPT},
                                {"type": "image_url", "image_url": {"url": img_url}},
                            ],
                        }
                    ],
                    response_format={"type": "json_object"},
                    temperature=0.2,
                )
                
                analysis_result = response.choices[0].message.content
                st.success("ุชู ุงูุชุญููู ุจูุฌุงุญ!")
                st.json(analysis_result)

            except Exception as e:
                st.error(f"ุญุฏุซ ุฎุทุฃ ูุงุฏุญ ุฃุซูุงุก ุงูุงุชุตุงู ุจู OpenAI: {e}")
